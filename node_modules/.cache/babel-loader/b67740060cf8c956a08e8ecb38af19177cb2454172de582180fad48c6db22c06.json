{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  useEffect(() => {\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === \"clear\" ? [0, \"clear\"] : cell));\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            // Ensure the cell is within the boundaries of the stage\n            if (newStage[y + player.pos.y] && newStage[y + player.pos.y][x + player.pos.x]) {\n              newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? \"merged\" : \"clear\"}`];\n            }\n          }\n        });\n      });\n      return newStage;\n    };\n    setStage(prev => updateStage(prev));\n  }, [player]);\n  return [stage, setStage];\n};\n_s(useStage, \"5P+otx0I7S1W+XNBDZZ95jKxV+k=\");","map":{"version":3,"names":["useState","useEffect","createStage","useStage","player","resetPlayer","_s","stage","setStage","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","pos","collided","prev"],"sources":["/home/akash/myReact/react-tetris/src/hooks/useStage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n\n  useEffect(() => {\n    const updateStage = (prevStage) => {\n      // First flush the stage\n      const newStage = prevStage.map((row) =>\n        row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\n      );\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            // Ensure the cell is within the boundaries of the stage\n            if (\n              newStage[y + player.pos.y] &&\n              newStage[y + player.pos.y][x + player.pos.x]\n            ) {\n              newStage[y + player.pos.y][x + player.pos.x] = [\n                value,\n                `${player.collided ? \"merged\" : \"clear\"}`,\n              ];\n            }\n          }\n        });\n      });\n      return newStage;\n    };\n\n    setStage((prev) => updateStage(prev));\n  }, [player]);\n\n  return [stage, setStage];\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,gBAAgB;AAE5C,OAAO,MAAMC,QAAQ,GAAGA,CAACC,MAAM,EAAEC,WAAW,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACE,WAAW,CAAC,CAAC,CAAC;EAEjDD,SAAS,CAAC,MAAM;IACd,MAAMQ,WAAW,GAAIC,SAAS,IAAK;MACjC;MACA,MAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAG,CAAEC,GAAG,IACjCA,GAAG,CAACD,GAAG,CAAEE,IAAI,IAAMA,IAAI,CAAC,CAAC,CAAC,KAAK,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,GAAGA,IAAK,CAC/D,CAAC;;MAED;MACAV,MAAM,CAACW,SAAS,CAACC,OAAO,CAAC,CAACH,GAAG,EAAEI,CAAC,KAAK;QACnCJ,GAAG,CAACG,OAAO,CAAC,CAACE,KAAK,EAAEC,CAAC,KAAK;UACxB,IAAID,KAAK,KAAK,CAAC,EAAE;YACf;YACA,IACEP,QAAQ,CAACM,CAAC,GAAGb,MAAM,CAACgB,GAAG,CAACH,CAAC,CAAC,IAC1BN,QAAQ,CAACM,CAAC,GAAGb,MAAM,CAACgB,GAAG,CAACH,CAAC,CAAC,CAACE,CAAC,GAAGf,MAAM,CAACgB,GAAG,CAACD,CAAC,CAAC,EAC5C;cACAR,QAAQ,CAACM,CAAC,GAAGb,MAAM,CAACgB,GAAG,CAACH,CAAC,CAAC,CAACE,CAAC,GAAGf,MAAM,CAACgB,GAAG,CAACD,CAAC,CAAC,GAAG,CAC7CD,KAAK,EACJ,GAAEd,MAAM,CAACiB,QAAQ,GAAG,QAAQ,GAAG,OAAQ,EAAC,CAC1C;YACH;UACF;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MACF,OAAOV,QAAQ;IACjB,CAAC;IAEDH,QAAQ,CAAEc,IAAI,IAAKb,WAAW,CAACa,IAAI,CAAC,CAAC;EACvC,CAAC,EAAE,CAAClB,MAAM,CAAC,CAAC;EAEZ,OAAO,CAACG,KAAK,EAAEC,QAAQ,CAAC;AAC1B,CAAC;AAACF,EAAA,CAlCWH,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}