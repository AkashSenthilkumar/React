{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage => {\n      let rowsCleared = 0;\n      const updatedStage = newStage.reduce((acc, row) => {\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\n          rowsCleared += 1;\n          acc.unshift(new Array(STAGE_WIDTH).fill([0, 'clear']));\n          return acc;\n        }\n        acc.push(row);\n        return acc;\n      }, []);\n      return {\n        updatedStage,\n        rowsCleared\n      };\n    };\n    const updateStage = prevStage => {\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            const newY = y + player.pos.y;\n            const newX = x + player.pos.x;\n            if (newY >= 0 && newY < STAGE_HEIGHT && newX >= 0 && newX < STAGE_WIDTH) {\n              newStage[newY][newX] = [value, `${player.collided ? 'merged' : 'clear'}`];\n            }\n          }\n        });\n      });\n      if (player.collided) {\n        const {\n          updatedStage,\n          rowsCleared\n        } = sweepRows(newStage);\n        setRowsCleared(rows => rows + rowsCleared);\n        resetPlayer();\n        return updatedStage;\n      }\n      return newStage;\n    };\n    setStage(prev => updateStage(prev));\n  }, [player]);\n  return [stage, setStage, rowsCleared];\n};\n_s(useStage, \"kMQgahRXXeXYpK/xfwjy5Z7lEYg=\");","map":{"version":3,"names":["useState","useEffect","createStage","useStage","player","resetPlayer","_s","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","updatedStage","reduce","acc","row","findIndex","cell","unshift","Array","STAGE_WIDTH","fill","push","updateStage","prevStage","map","tetromino","forEach","y","value","x","newY","pos","newX","STAGE_HEIGHT","collided","rows","prev"],"sources":["/home/akash/myReact/react-tetris/src/hooks/useStage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);\n  \n    useEffect(() => {\n        setRowsCleared(0);\n\n        const sweepRows = newStage => {\n          let rowsCleared = 0;\n          const updatedStage = newStage.reduce((acc, row) => {\n              if (row.findIndex(cell => cell[0] === 0) === -1) {\n                  rowsCleared += 1;\n                  acc.unshift(new Array(STAGE_WIDTH).fill([0, 'clear']));\n                  return acc;\n              }\n              acc.push(row);\n              return acc;\n          }, []);\n      \n          return { updatedStage, rowsCleared };\n      };\n      \n      const updateStage = (prevStage) => {\n          const newStage = prevStage.map(row =>\n              row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n          );\n      \n          player.tetromino.forEach((row, y) => {\n              row.forEach((value, x) => {\n                  if (value !== 0) {\n                      const newY = y + player.pos.y;\n                      const newX = x + player.pos.x;\n      \n                      if (\n                          newY >= 0 &&\n                          newY < STAGE_HEIGHT &&\n                          newX >= 0 &&\n                          newX < STAGE_WIDTH\n                      ) {\n                          newStage[newY][newX] = [\n                              value,\n                              `${player.collided ? 'merged' : 'clear'}`,\n                          ];\n                      }\n                  }\n              });\n          });\n      \n          if (player.collided) {\n              const { updatedStage, rowsCleared } = sweepRows(newStage);\n              setRowsCleared(rows => rows + rowsCleared);\n              resetPlayer();\n              return updatedStage;\n          }\n      \n          return newStage;\n      };\n      \n      setStage((prev) => updateStage(prev));\n    }, [player]);\n  \n    return [stage, setStage, rowsCleared];\n  };\n  "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAO,MAAMC,QAAQ,GAAGA,CAACC,MAAM,EAAEC,WAAW,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACE,WAAW,CAAC,CAAC,CAAC;EACjD,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACZS,cAAc,CAAC,CAAC,CAAC;IAEjB,MAAMC,SAAS,GAAGC,QAAQ,IAAI;MAC5B,IAAIH,WAAW,GAAG,CAAC;MACnB,MAAMI,YAAY,GAAGD,QAAQ,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;QAC/C,IAAIA,GAAG,CAACC,SAAS,CAACC,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;UAC7CT,WAAW,IAAI,CAAC;UAChBM,GAAG,CAACI,OAAO,CAAC,IAAIC,KAAK,CAACC,WAAW,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;UACtD,OAAOP,GAAG;QACd;QACAA,GAAG,CAACQ,IAAI,CAACP,GAAG,CAAC;QACb,OAAOD,GAAG;MACd,CAAC,EAAE,EAAE,CAAC;MAEN,OAAO;QAAEF,YAAY;QAAEJ;MAAY,CAAC;IACxC,CAAC;IAED,MAAMe,WAAW,GAAIC,SAAS,IAAK;MAC/B,MAAMb,QAAQ,GAAGa,SAAS,CAACC,GAAG,CAACV,GAAG,IAC9BA,GAAG,CAACU,GAAG,CAACR,IAAI,IAAKA,IAAI,CAAC,CAAC,CAAC,KAAK,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,GAAGA,IAAK,CAC/D,CAAC;MAEDd,MAAM,CAACuB,SAAS,CAACC,OAAO,CAAC,CAACZ,GAAG,EAAEa,CAAC,KAAK;QACjCb,GAAG,CAACY,OAAO,CAAC,CAACE,KAAK,EAAEC,CAAC,KAAK;UACtB,IAAID,KAAK,KAAK,CAAC,EAAE;YACb,MAAME,IAAI,GAAGH,CAAC,GAAGzB,MAAM,CAAC6B,GAAG,CAACJ,CAAC;YAC7B,MAAMK,IAAI,GAAGH,CAAC,GAAG3B,MAAM,CAAC6B,GAAG,CAACF,CAAC;YAE7B,IACIC,IAAI,IAAI,CAAC,IACTA,IAAI,GAAGG,YAAY,IACnBD,IAAI,IAAI,CAAC,IACTA,IAAI,GAAGb,WAAW,EACpB;cACET,QAAQ,CAACoB,IAAI,CAAC,CAACE,IAAI,CAAC,GAAG,CACnBJ,KAAK,EACJ,GAAE1B,MAAM,CAACgC,QAAQ,GAAG,QAAQ,GAAG,OAAQ,EAAC,CAC5C;YACL;UACJ;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;MAEF,IAAIhC,MAAM,CAACgC,QAAQ,EAAE;QACjB,MAAM;UAAEvB,YAAY;UAAEJ;QAAY,CAAC,GAAGE,SAAS,CAACC,QAAQ,CAAC;QACzDF,cAAc,CAAC2B,IAAI,IAAIA,IAAI,GAAG5B,WAAW,CAAC;QAC1CJ,WAAW,CAAC,CAAC;QACb,OAAOQ,YAAY;MACvB;MAEA,OAAOD,QAAQ;IACnB,CAAC;IAEDJ,QAAQ,CAAE8B,IAAI,IAAKd,WAAW,CAACc,IAAI,CAAC,CAAC;EACvC,CAAC,EAAE,CAAClC,MAAM,CAAC,CAAC;EAEZ,OAAO,CAACG,KAAK,EAAEC,QAAQ,EAAEC,WAAW,CAAC;AACvC,CAAC;AAACH,EAAA,CA9DSH,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}