{"ast":null,"code":"export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\nexport const createStage = () => Array.from(Array(STAGE_HEIGHT), () => new Array(STAGE_WIDTH).fill([0, 'clear']));\nexport const checkCollision = (player, stage, {\n  x: moveX,\n  y: moveY\n}) => {\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      // 1.Check that we're on an actual Tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        if (\n        // 2. Check that our work is inside the game areas height (y)\n        // We shouldn't go through the bottom of the play area\n        !stage[y + player.pos.y + moveY] ||\n        // 3. Check that our move is inside the game areas width (x)\n        !stage[y + player.pos.y + moveY][x + player.pos.x + moveX]\n        // 4. Check that the cell were moving to isn't set to clear\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["STAGE_WIDTH","STAGE_HEIGHT","createStage","Array","from","fill","checkCollision","player","stage","x","moveX","y","moveY","tetromino","length","pos"],"sources":["/home/akash/myReact/react-tetris/src/gameHelpers.js"],"sourcesContent":["export const STAGE_WIDTH =12;\nexport const STAGE_HEIGHT =20;\n\nexport const createStage = () =>\n    Array.from(Array(STAGE_HEIGHT), () =>\n    new Array(STAGE_WIDTH).fill([0, 'clear'])\n    )\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n    for (let y=0; y < player.tetromino.length; y += 1) {\n        for (let x = 0; x< player.tetromino[y].length; x+=1) {\n            // 1.Check that we're on an actual Tetromino cell\n            if (player.tetromino[y][x] !==  0){\n                if (\n                    // 2. Check that our work is inside the game areas height (y)\n                    // We shouldn't go through the bottom of the play area\n                    !stage[y + player.pos.y + moveY] ||\n                     // 3. Check that our move is inside the game areas width (x)\n                     !stage[y + player.pos.y  + moveY][x + player.pos.x + moveX]\n                     // 4. Check that the cell were moving to isn't set to clear\n                ){\n                   return true;\n                }\n                \n            }\n        }\n    }\n}"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAE,EAAE;AAC5B,OAAO,MAAMC,YAAY,GAAE,EAAE;AAE7B,OAAO,MAAMC,WAAW,GAAGA,CAAA,KACvBC,KAAK,CAACC,IAAI,CAACD,KAAK,CAACF,YAAY,CAAC,EAAE,MAChC,IAAIE,KAAK,CAACH,WAAW,CAAC,CAACK,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CACxC,CAAC;AAEL,OAAO,MAAMC,cAAc,GAAGA,CAACC,MAAM,EAAEC,KAAK,EAAE;EAAEC,CAAC,EAAEC,KAAK;EAAEC,CAAC,EAAEC;AAAM,CAAC,KAAK;EACrE,KAAK,IAAID,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAGJ,MAAM,CAACM,SAAS,CAACC,MAAM,EAAEH,CAAC,IAAI,CAAC,EAAE;IAC/C,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAEF,MAAM,CAACM,SAAS,CAACF,CAAC,CAAC,CAACG,MAAM,EAAEL,CAAC,IAAE,CAAC,EAAE;MACjD;MACA,IAAIF,MAAM,CAACM,SAAS,CAACF,CAAC,CAAC,CAACF,CAAC,CAAC,KAAM,CAAC,EAAC;QAC9B;QACI;QACA;QACA,CAACD,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAG,CAACJ,CAAC,GAAGC,KAAK,CAAC;QAC/B;QACA,CAACJ,KAAK,CAACG,CAAC,GAAGJ,MAAM,CAACQ,GAAG,CAACJ,CAAC,GAAIC,KAAK,CAAC,CAACH,CAAC,GAAGF,MAAM,CAACQ,GAAG,CAACN,CAAC,GAAGC,KAAK;QAC1D;QAAA,EACJ;UACE,OAAO,IAAI;QACd;MAEJ;IACJ;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}