{"ast":null,"code":"var _s = $RefreshSig$();\nexport const STAGE_WIDTH = 12;\nimport { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage => {\n      let rowsCleared = 0;\n      const updatedStage = newStage.reduce((acc, row) => {\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\n          rowsCleared += 1;\n          acc.unshift(new Array(STAGE_WIDTH).fill([0, 'clear']));\n          return acc;\n        }\n        acc.push(row);\n        return acc;\n      }, []);\n      return {\n        updatedStage,\n        rowsCleared\n      };\n    };\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === \"clear\" ? [0, \"clear\"] : cell));\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            const newY = y + (player.pos.y || 0); // Use \"y\" instead of \"Y\" for consistency\n            const newX = x + (player.pos.x || 0);\n\n            // Ensure the cell is within the boundaries of the stage\n            if (newStage[newY] && newStage[newY][newX] !== undefined) {\n              newStage[newY][newX] = [value, `${player.collided ? \"merged\" : \"clear\"}`];\n            }\n          }\n        });\n      });\n      // then check if we collided\n      if (player.collided) {\n        resetPlayer();\n        setRowsCleared(rows => rows + 1); // Update rows outside of sweepRows\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n    setStage(prev => updateStage(prev));\n  }, [player]);\n  return [stage, setStage, rowsCleared];\n};\n_s(useStage, \"kMQgahRXXeXYpK/xfwjy5Z7lEYg=\");","map":{"version":3,"names":["STAGE_WIDTH","useState","useEffect","createStage","useStage","player","resetPlayer","_s","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","updatedStage","reduce","acc","row","findIndex","cell","unshift","Array","fill","push","updateStage","prevStage","map","tetromino","forEach","y","value","x","newY","pos","newX","undefined","collided","rows","prev"],"sources":["/home/akash/myReact/react-tetris/src/hooks/useStage.js"],"sourcesContent":["export const STAGE_WIDTH =12;\n\nimport { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);\n  \n    useEffect(() => {\n        setRowsCleared(0);\n\n        const sweepRows = newStage => {\n          let rowsCleared = 0;\n          const updatedStage = newStage.reduce((acc, row) => {\n              if (row.findIndex(cell => cell[0] === 0) === -1) {\n                  rowsCleared += 1;\n                  acc.unshift(new Array(STAGE_WIDTH).fill([0, 'clear']));\n                  return acc;\n              }\n              acc.push(row);\n              return acc;\n          }, []);\n      \n          return { updatedStage, rowsCleared };\n      };\n\n      const updateStage = (prevStage) => {\n        // First flush the stage\n        const newStage = prevStage.map((row) =>\n          row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\n        );\n  \n        // Then draw the tetromino\n        player.tetromino.forEach((row, y) => {\n          row.forEach((value, x) => {\n            if (value !== 0) {\n              const newY = y + (player.pos.y || 0);  // Use \"y\" instead of \"Y\" for consistency\n              const newX = x + (player.pos.x || 0);\n  \n  \n              // Ensure the cell is within the boundaries of the stage\n              if (\n                newStage[newY] &&\n                newStage[newY][newX] !== undefined\n              ) {\n                newStage[newY][newX] = [\n                  value,\n                  `${player.collided ? \"merged\" : \"clear\"}`,\n                ];\n              }\n            }\n          });\n        });\n        // then check if we collided\n       if (player.collided) {\n            resetPlayer();\n            setRowsCleared(rows => rows + 1);  // Update rows outside of sweepRows\n            return sweepRows(newStage);\n        }\n        return newStage;\n    };\n    \n      setStage((prev) => updateStage(prev));\n    }, [player]);\n  \n    return [stage, setStage, rowsCleared];\n  };\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}