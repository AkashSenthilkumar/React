{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === \"clear\" ? [0, \"clear\"] : cell));\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            const newY = y + (player.pos.y || 0); // Use \"y\" instead of \"Y\" for consistency\n            const newX = x + (player.pos.x || 0);\n\n            // Ensure the cell is within the boundaries of the stage\n            if (newStage[newY] && newStage[newY][newX] !== undefined) {\n              newStage[newY][newX] = [value, `${player.collided ? \"merged\" : \"clear\"}`];\n            }\n          }\n        });\n      });\n      // then check if we collided\n      if (player.collided) {\n        resetPlayer();\n      }\n      return newStage;\n    };\n    setStage(prev => updateStage(prev));\n  }, [player]);\n  return [stage, setStage];\n};\n_s(useStage, \"kMQgahRXXeXYpK/xfwjy5Z7lEYg=\");","map":{"version":3,"names":["useState","useEffect","createStage","useStage","player","resetPlayer","_s","stage","setStage","rowsCleared","setRowsCleared","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","newY","pos","newX","undefined","collided","prev"],"sources":["/home/akash/myReact/react-tetris/src/hooks/useStage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);\n  \n    useEffect(() => {\n      const updateStage = (prevStage) => {\n        // First flush the stage\n        const newStage = prevStage.map((row) =>\n          row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\n        );\n  \n        // Then draw the tetromino\n        player.tetromino.forEach((row, y) => {\n          row.forEach((value, x) => {\n            if (value !== 0) {\n              const newY = y + (player.pos.y || 0);  // Use \"y\" instead of \"Y\" for consistency\n              const newX = x + (player.pos.x || 0);\n  \n  \n              // Ensure the cell is within the boundaries of the stage\n              if (\n                newStage[newY] &&\n                newStage[newY][newX] !== undefined\n              ) {\n                newStage[newY][newX] = [\n                  value,\n                  `${player.collided ? \"merged\" : \"clear\"}`,\n                ];\n              }\n            }\n          });\n        });\n        // then check if we collided\n        if (player.collided){\n          resetPlayer();\n        }\n        return newStage;\n      };\n  \n      setStage((prev) => updateStage(prev));\n    }, [player]);\n  \n    return [stage, setStage];\n  };\n  "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAO,MAAMC,QAAQ,GAAGA,CAACC,MAAM,EAAEC,WAAW,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACE,WAAW,CAAC,CAAC,CAAC;EACjD,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACd,MAAMU,WAAW,GAAIC,SAAS,IAAK;MACjC;MACA,MAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAG,CAAEC,GAAG,IACjCA,GAAG,CAACD,GAAG,CAAEE,IAAI,IAAMA,IAAI,CAAC,CAAC,CAAC,KAAK,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,GAAGA,IAAK,CAC/D,CAAC;;MAED;MACAZ,MAAM,CAACa,SAAS,CAACC,OAAO,CAAC,CAACH,GAAG,EAAEI,CAAC,KAAK;QACnCJ,GAAG,CAACG,OAAO,CAAC,CAACE,KAAK,EAAEC,CAAC,KAAK;UACxB,IAAID,KAAK,KAAK,CAAC,EAAE;YACf,MAAME,IAAI,GAAGH,CAAC,IAAIf,MAAM,CAACmB,GAAG,CAACJ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAE;YACvC,MAAMK,IAAI,GAAGH,CAAC,IAAIjB,MAAM,CAACmB,GAAG,CAACF,CAAC,IAAI,CAAC,CAAC;;YAGpC;YACA,IACER,QAAQ,CAACS,IAAI,CAAC,IACdT,QAAQ,CAACS,IAAI,CAAC,CAACE,IAAI,CAAC,KAAKC,SAAS,EAClC;cACAZ,QAAQ,CAACS,IAAI,CAAC,CAACE,IAAI,CAAC,GAAG,CACrBJ,KAAK,EACJ,GAAEhB,MAAM,CAACsB,QAAQ,GAAG,QAAQ,GAAG,OAAQ,EAAC,CAC1C;YACH;UACF;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MACF;MACA,IAAItB,MAAM,CAACsB,QAAQ,EAAC;QAClBrB,WAAW,CAAC,CAAC;MACf;MACA,OAAOQ,QAAQ;IACjB,CAAC;IAEDL,QAAQ,CAAEmB,IAAI,IAAKhB,WAAW,CAACgB,IAAI,CAAC,CAAC;EACvC,CAAC,EAAE,CAACvB,MAAM,CAAC,CAAC;EAEZ,OAAO,CAACG,KAAK,EAAEC,QAAQ,CAAC;AAC1B,CAAC;AAACF,EAAA,CA3CSH,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}